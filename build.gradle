plugins {
	id 'com.github.spotbugs' version '1.6.0'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'

allprojects {
    sourceCompatibility = 9
    targetCompatibility = 9
}

version = '0.1'

repositories {
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://jcenter.bintray.com/" } // has package: com.twmacinta:fast-md5:2.7.1
        mavenLocal()
}

dependencies {
	// Add Maven deps
	compile 'org.bytedeco:javacv:0.9',
		'com.fasterxml.jackson.core:jackson-databind:2.2.3',
		'com.lambdaworks:scrypt:1.2.0',
		'joda-time:joda-time:2.4',
		'junit:junit:4.11',
		'org.apache.commons:commons-lang3:3.3.2',
		'commons-configuration:commons-configuration:1.10',
		'org.apache.httpcomponents:httpclient:4.3.5',
		'org.apache.logging.log4j:log4j-core:2.0.2',
		'org.slf4j:slf4j-api:1.7.7',
		'org.slf4j:slf4j-log4j12:1.7.7',
		'it.unimi.dsi:dsiutils:2.3.3',
		'com.github.spotbugs:spotbugs-annotations:3.1.1',
		'com.twmacinta:fast-md5:2.7.1',
		'com.github.spotbugs:spotbugs-annotations:3.1.1'

	// Runtime
	runtime fileTree(dir: 'libs', include: '*.jar')

	// JUnit
	testCompile("junit:junit:4.12")
	testRuntime("org.junit.vintage:junit-vintage-engine:4.12.3")
	testCompile("org.junit.jupiter:junit-jupiter-api:5.0.3")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.3")
	testCompile("org.junit.platform:junit-platform-runner:1.0.3")
}

eclipse {
	project {
		name = 'Multiverse Randomizer'
		comment = 'Test concepts'
		natures 'org.eclipse.jdt.core.javanature'
	}
}

jar {
	// adds runtime dependencies to jar package
	from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
		// remove all signature files
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}

	manifest {
		attributes	'Implementation-Title': 'multiverse-randomizer',
				'Implementation-Version': version,
				'Main-Class': 'com.damari.mvrnd.app.MultiverseRandomizer'
	}
}

// add source to where is possible
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

test {
	minHeapSize = "2048m"
	maxHeapSize = "8192m"
	jvmArgs "-XX:+CMSClassUnloadingEnabled"
	jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
}

checkstyle {
	ignoreFailures = false
	configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
}

spotbugs {
	// http://gradle.monochromeroad.com/docs/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
	toolVersion = '3.1.1'
	ignoreFailures = false
	effort = 'max'
	reportLevel = 'high'
}
